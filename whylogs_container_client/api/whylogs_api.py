# coding: utf-8

"""
    whylogs container API

    Container that hosts the java version of whylogs behind a REST interface.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from whylogs_container_client.api_client import ApiClient


class WhylogsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def track(self, **kwargs):  # noqa: E501
        """Log Data  # noqa: E501

        Log a map of feature names and values or an array of data points  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.track(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogRequest body: 
Pass the input in single entry format or a multiple entry format.
- Set `single` key if you're passing a single data point with multiple features
- Set `multiple` key if you're passing multiple data at once.
The `multiple` format is is compatible with Pandas JSON output:
```
import pandas as pd
cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
        'Price': [22000,25000,27000,35000] }
df = pd.DataFrame(cars, columns = ['Brand', 'Price'])
df.to_json(orient="split") # this is the value of `multiple`
```
Here is an example from the output above
```
{
    "datasetId": "demo-model",
    "timestamp": 1648162494947,
    "tags": {
        "tag1": "value1"
    },
    "multiple": {
        "columns": [
            "Brand",
            "Price"
        ],
        "data": [
            [ "Honda Civic", 22000 ],
            [ "Toyota Corolla", 25000 ],
            [ "Ford Focus", 27000 ],
            [ "Audi A4", 35000 ]
        ]
    }
}
```

        :param str x_api_key:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.track_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.track_with_http_info(**kwargs)  # noqa: E501
            return data

    def track_with_http_info(self, **kwargs):  # noqa: E501
        """Log Data  # noqa: E501

        Log a map of feature names and values or an array of data points  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.track_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogRequest body: 
Pass the input in single entry format or a multiple entry format.
- Set `single` key if you're passing a single data point with multiple features
- Set `multiple` key if you're passing multiple data at once.
The `multiple` format is is compatible with Pandas JSON output:
```
import pandas as pd
cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
        'Price': [22000,25000,27000,35000] }
df = pd.DataFrame(cars, columns = ['Brand', 'Price'])
df.to_json(orient="split") # this is the value of `multiple`
```
Here is an example from the output above
```
{
    "datasetId": "demo-model",
    "timestamp": 1648162494947,
    "tags": {
        "tag1": "value1"
    },
    "multiple": {
        "columns": [
            "Brand",
            "Price"
        ],
        "data": [
            [ "Honda Civic", 22000 ],
            [ "Toyota Corolla", 25000 ],
            [ "Ford Focus", 27000 ],
            [ "Audi A4", 35000 ]
        ]
    }
}
```

        :param str x_api_key:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method track" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def track_pub_sub_message(self, **kwargs):  # noqa: E501
        """Track pub/sub messages  # noqa: E501

        Decode base64 encoded pub/sub message and track them  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.track_pub_sub_message(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PubSubEnvelope body: 
                A Google Pub\Sub interface to tracking data. Does the same thing as /track except
                it consumes a message in the format that Pub\Sub uses.

        :param str x_api_key:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.track_pub_sub_message_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.track_pub_sub_message_with_http_info(**kwargs)  # noqa: E501
            return data

    def track_pub_sub_message_with_http_info(self, **kwargs):  # noqa: E501
        """Track pub/sub messages  # noqa: E501

        Decode base64 encoded pub/sub message and track them  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.track_pub_sub_message_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PubSubEnvelope body: 
                A Google Pub\Sub interface to tracking data. Does the same thing as /track except
                it consumes a message in the format that Pub\Sub uses.

        :param str x_api_key:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method track_pub_sub_message" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pubsubLogs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def write_profiles(self, **kwargs):  # noqa: E501
        """Write Profiles  # noqa: E501

        Force the container to write out the pending profiles via whatever method it's configured for.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.write_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key:
        :return: WriteProfilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.write_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.write_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def write_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """Write Profiles  # noqa: E501

        Force the container to write out the pending profiles via whatever method it's configured for.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.write_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key:
        :return: WriteProfilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method write_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/writeProfiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WriteProfilesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
