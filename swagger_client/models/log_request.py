# coding: utf-8

"""
    whylogs container API

    Container that hosts the java version of whylogs behind a REST interface.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_id': 'str',
        'timestamp': 'int',
        'tags': 'dict(str, str)',
        'single': 'dict(str, object)',
        'multiple': 'MultiLog'
    }

    attribute_map = {
        'dataset_id': 'datasetId',
        'timestamp': 'timestamp',
        'tags': 'tags',
        'single': 'single',
        'multiple': 'multiple'
    }

    def __init__(self, dataset_id=None, timestamp=None, tags=None, single=None, multiple=None):  # noqa: E501
        """LogRequest - a model defined in Swagger"""  # noqa: E501
        self._dataset_id = None
        self._timestamp = None
        self._tags = None
        self._single = None
        self._multiple = None
        self.discriminator = None
        self.dataset_id = dataset_id
        if timestamp is not None:
            self.timestamp = timestamp
        if tags is not None:
            self.tags = tags
        if single is not None:
            self.single = single
        if multiple is not None:
            self.multiple = multiple

    @property
    def dataset_id(self):
        """Gets the dataset_id of this LogRequest.  # noqa: E501


        :return: The dataset_id of this LogRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this LogRequest.


        :param dataset_id: The dataset_id of this LogRequest.  # noqa: E501
        :type: str
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def timestamp(self):
        """Gets the timestamp of this LogRequest.  # noqa: E501


        :return: The timestamp of this LogRequest.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LogRequest.


        :param timestamp: The timestamp of this LogRequest.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def tags(self):
        """Gets the tags of this LogRequest.  # noqa: E501


        :return: The tags of this LogRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LogRequest.


        :param tags: The tags of this LogRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def single(self):
        """Gets the single of this LogRequest.  # noqa: E501

        Key/value pairs of col/data.  # noqa: E501

        :return: The single of this LogRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._single

    @single.setter
    def single(self, single):
        """Sets the single of this LogRequest.

        Key/value pairs of col/data.  # noqa: E501

        :param single: The single of this LogRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._single = single

    @property
    def multiple(self):
        """Gets the multiple of this LogRequest.  # noqa: E501


        :return: The multiple of this LogRequest.  # noqa: E501
        :rtype: MultiLog
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this LogRequest.


        :param multiple: The multiple of this LogRequest.  # noqa: E501
        :type: MultiLog
        """

        self._multiple = multiple

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
